FROM arm32v6/golang:alpine3.12 as build
# FROM arm32v6/golang:alpine3.12

# Copy downloaded architecture emulation static binary
COPY qemu-arm-static /usr/bin/

# Create appuser so application does not run as root in final container
# See https://stackoverflow.com/a/55757473/12429735
# ENV USER=appuser
# ENV UID=10001
# RUN adduser \
#   --disabled-password \
#   --gecos "" \
#   --home "/nonexistent" \
#   --shell "/sbin/nologin" \
#   --no-create-home \
#   --uid "${UID}" \
#   "${USER}"

ARG VERSION
ENV K8S_VERSION=1.21
ENV K8S_SOURCE=https://github.com/kubernetes/kubernetes

# Add ca-certificates in the event final application needs ssl/tls
RUN apk add -q --no-cache alpine-sdk rsync bash ca-certificates
SHELL ["/bin/bash", "-c"]

RUN set -ex                                                  \
  && mkdir -p $GOPATH/src/k8s.io && cd $GOPATH/src/k8s.io    \
  && git clone --depth 1 -b release-$K8S_VERSION $K8S_SOURCE

# RUN cd $GOPATH/src/k8s.io/kubernetes/ && make all WHAT=cmd/kubectl GOFLAGS=-v

RUN [[ -n "$( echo $VERSION | grep -v no-make )" ]] && ( cd $GOPATH/src/k8s.io/kubernetes/ && make all WHAT=cmd/kubectl GOFLAGS=-v ) || echo -e "\n\n-> ! Skipped k8s build ! <-\n\n"

# RUN mkdir -p /go/src/k8s.io/kubernetes/_output/local/go/bin/
# RUN cp /usr/bin/git /go/src/k8s.io/kubernetes/_output/local/go/bin/kubectl
# RUN echo "--> $(git version)"
# RUN which git
# RUN ls /go/src/k8s.io/kubernetes/_output/local/go/bin/kubectl
# RUN /go/src/k8s.io/kubernetes/_output/local/go/bin/kubectl version

###############################################################################
# final stage
FROM arm32v6/alpine:3.12
COPY --from=build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
# COPY --from=build /etc/passwd /etc/passwd
# COPY --from=build /etc/group /etc/group
# USER appuser:appuser

COPY --from=build /go/src/k8s.io/kubernetes/_output/local/go/bin/kubectl /kubectl

ENTRYPOINT ["/kubectl"]